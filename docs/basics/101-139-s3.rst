.. _s3:

Amazon S3 as a special remote
-----------------------------

`Amazon S3 <https://aws.amazon.com/s3/>`_ (or Amazon Simple Storage Service) is a
popular service by `Amazon Web Services <https://aws.amazon.com/>`_ (AWS) that
provides object storage through a web service interface. An S3 bucket can be 
configured as a :term:`git-annex` :term:`special remote`, allowing it to be used
as a DataLad publication target. This means that you can use Amazon S3 to store your
annexed data contents and allow users to install your full dataset with DataLad
from a publicly available repository service such as GitHub.

.. find-out-more:: What is a special remote

   A special-remote is an extension to Git’s concept of remotes, and can
   enable :term:`git-annex` to transfer data from and possibly to places that are not Git
   repositories (e.g., cloud services or external machines such as an HPC
   system). For example, *s3* special remote uploads and downloads content
   to AWS S3, *web* special remote downloads files from the web, *datalad-archive*
   extracts files from the annexed archives, etc. Don’t envision a special-remote
   as merely a physical place or location – a special-remote is a protocol that
   defines the underlying transport of your files to and/or from a specific location.

In this section, we provide a walkthrough on how to set up Amazon S3 for hosting
your DataLad dataset, and how to access this data locally from GitHub.

Prerequisites
^^^^^^^^^^^^^
In order to use Amazon S3 for hosting your datasets, you need to:

- Signup for an `AWS account <https://aws.amazon.com/>`_
- Verify your account
- Find your AWS access key
- Signup for a `GitHub account <https://github.com/join>`_
- Optional: install the `AWS Command Line Interface <https://aws.amazon.com/cli/>`_

The `AWS signup <https://aws.amazon.com/>`_ procedure requires you to provide your
e-mail address, physical address, and credit card details before verification is possible. 

To find your AWS access key, log in to the `AWS Console <https://console.aws.amazon.com/>`_,
open the dropdown menu at your username (top right), and select "My Security
Credentials". A new page will open with several options, including "Access keys
(access key ID and secret access key)" from where you can select "Create New Access
Key" or access existing credentials. Take note to copy both the "Access Key ID" and
"Secret Access Key".

.. figure:: ../artwork/src/aws_s3_create_access_key.png

   Create a new AWS access key from "My Security Credentials"

To ensure that your access key details are known when initializing the special
remote, export them in your shell:

.. code-block:: bash

   $ export AWS_ACCESS_KEY_ID="<your-access-key-ID>"
   $ export AWS_SECRET_ACCESS_KEY"<your-secret-access-key>"

In order to work directly with AWS via your command-line shell, you can
`install the AWS CLI <https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html>`_.
However, that is not required for this walkthrough.

Lastly, to publish your data repository to GitHub, from which users will be able do install
the complete dataset, you will need a `GitHub account <https://github.com/join>`_.

Your DataLad dataset
^^^^^^^^^^^^^^^^^^^^
For this walkthrough, we are using a basic sample neuroimaging dataset with
anatomical and functional images from a single subject as well as some
metadata:

.. code-block:: bash

   $ cd /tmp/sample_neuro_data
   $ tree
   .
   ├── dataset_description.json
   ├── participants.tsv
   ├── sub-01
   │   ├── anat
   │   │   └── sub-01_T1w.nii.gz
   │   └── func
   │       ├── sub-01_task-rest_run-1_bold.nii.gz
   │       └── sub-01_task-rest_run-2_bold.nii.gz
   └── task-rest_bold.json

The first step is to ensure that you have a valid DataLad dataset,
with ``main`` as the default branch.

.. importantnote:: Ensure main is set as default branch for newly-created repositories

  Any new dataset configured with ``master`` instead of ``main`` as the default branch will get
  ``git-annex`` configured to be the default displayed branch when it is pushed to GitHub.
  See `this DataLad issue <https://github.com/datalad/datalad/issues/4997>`_ for more 
  information. This can be prevented by:

  * `a user/organization setting on GitHub about default branches <https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories/>`_
  * setting ``main`` as the default branch by changing your global ``git config``::

      git config --global init.defaultBranch main

If you already have a DataLad dataset, navigate to its root directory. If not, create a
new directory, navigate to it, copy your data, turn the directory into a DataLad dataset
with :command:`datalad create --force`, and lastly save the dataset with :command:`datalad save`:

.. code-block:: bash

   $ cd <wherever-you-want-to-create-the-dataset>
   $ mkdir neuro-data-s3
   $ cd neuro-data-s3
   $ cp -a /tmp/sample_neuro_data/ .
   $ datalad create --force --description "neuro data to host on s3"
   [INFO   ] Creating a new annex repo at /Users/jsheunis/Documents/neuro-data-s3
   [INFO   ] Scanning for unlocked files (this may take some time)
   create(ok): /Users/jsheunis/Documents/neuro-data-s3 (dataset)
   $ datalad save -m "Add public data"
   add(ok): dataset_description.json (file)
   add(ok): participants.tsv (file)
   add(ok): sub-01/anat/sub-01_T1w.nii.gz (file)
   add(ok): sub-01/func/sub-01_task-rest_run-1_bold.nii.gz (file)
   add(ok): sub-01/func/sub-01_task-rest_run-2_bold.nii.gz (file)
   add(ok): task-rest_bold.json (file)
   save(ok): . (dataset)
   action summary:
   add (ok: 6)
   save (ok: 1)

Initialize the S3 special remote
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The steps below have been adapted from instructions provided on `git-annex documentation <https://git-annex.branchable.com/tips/public_Amazon_S3_remote/>`_.

By initializing the special remote, what actually happens in the background
is that a :term:`sibling` is added to the DataLad dataset. This can be verified
by running :command:`datalad siblings` before and after initializing the special
remote. Before, the only "sibling" is the actual DataLad dataset:

.. code-block:: bash

   $ datalad siblings
   .: here(+) [git]

To initialize a public S3 bucket as a special remote, we run :command:`git annex initremote`
with several options, for which `git-annex documentation on S3 <https://git-annex.branchable.com/special_remotes/S3/>`_
provides detailed information. Be sure to select a unique bucket name
that adheres to Amazon S3's `bucket naming rules <https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html>`_.
You can declare the bucket name (in this example "sample-neurodata-public") as a variable since
it will be used again later.

.. code-block:: bash

   $ BUCKET=sample-neurodata-public
   $ git annex initremote public-s3 type=S3 encryption=none \
   bucket=$BUCKET public=yes datacenter=EU autoenable=true
   initremote public-s3 (checking bucket...) (creating bucket in EU...) ok
   (recording state in git...)

The options used in this example include:

- ``public-s3``: the name we select for our special remote, so that git-annex and DataLad can identify it
- ``type=S3``: the type of special remote (git-annex can work with many `special remote types <https://git-annex.branchable.com/special_remotes/>`_)
- ``encryption=none``: no encryption (alternatively enable ``encryption=shared``, meaning files will be encrypted on S3, and anyone with a clone of the git repository will be able to download and decrypt them)
- ``bucket=$BUCKET``: the name of the bucket to be created on S3 (using the declared variable)
- ``public=yes``: Set to "yes" to allow public read access to files sent to the S3 remote
- ``datacenter=EU``: specify where the data will be located; here we set "EU" which is EU/Ireland a.k.a. ``eu-west-1`` (defaults to "US" if not specified)
- ``autoenable=true``: git-annex will attempt to enable the special remote when it is run in a new clone, implying that users won't have to run extra steps when installing the dataset with DataLad

After :command:`git annex initremote` has successfully initialized the special remote,
you can run :command:`datalad siblings` to see that a sibling has been added:

.. code-block:: bash

   $ datalad siblings
   .: here(+) [git]
   .: public-s3(+) [git]

You can also visit the `S3 Console <https://console.aws.amazon.com/s3/>`_ and navigate
to "Buckets" to see your newly created bucket. It should only have a single 
``annex-uuid`` file as content, since no actual file content has been pushed yet.

.. figure:: ../artwork/src/aws_s3_bucket_empty.png

   A newly created public S3 bucket

Lastly, for git-annex to be able to download files from the bucket without requiring your
AWS credentials, it needs to know where to find the bucket. We do this by setting the bucket
URL, which takes a standard format and can also be copied from your AWS console:

.. code-block:: bash

   $ git annex enableremote public-s3 \
   publicurl="https://$BUCKET.s3-eu-west-1.amazonaws.com"
   enableremote public-s3 ok
   (recording state in git...)


Publish the dataset
^^^^^^^^^^^^^^^^^^^

The special remote is ready, and now we want to give people seamless access to the
DataLad dataset. A common way to do this is to create a sibling of the dataset on
GitHub using :command:`create-sibling-github`. In order to link the contents in the
S3 special remote to the GitHub sibling, we also need to configure a publication
dependency to the ``public-s3`` sibling, which is done with the ``publish-depends <sibling>``
option. For conistency, we'll give the GitHub sibling the same name as the dataset name. 

.. code-block:: bash

   $ datalad create-sibling-github -d . neuro-data-s3 \
   --publish-depends public-s3
   [INFO   ] Configure additional publication dependency on "public-s3"
   .: github(-) [https://github.com/jsheunis/sample-neuro-data.git (git)]
   'https://github.com/jsheunis/sample-neuro-data.git' configured as sibling 'github' for Dataset(/Users/jsheunis/Documents/neuro-data-s3)

Notice that by creating this sibling, DataLad created an actual (empty) dataset repository
on GitHub, which required preconfigured GitHub authentication details.

.. importantnote:: GitHub deprecated its User Password authentication

   GitHub `decided to deprecate user-password authentication <https://developer.github.com/changes/2020-02-14-deprecating-password-auth/>`_ and
   only supports authentication via personal access token from November 13th 2020 onwards. Changes in DataLad's API reflect this change starting
   with DataLad version ``0.13.6`` by removing the ``github-passwd`` argument.

   To ensure successful authentication, please create a personal access token at `github.com/settings/tokens <https://github.com/settings/tokens>`_ [#f5]_, and either

   * configure Git's "``hub.oauthtoken``" config variable [#f7]_ with your token as in::

        git config --global --add hub.oauthtoken cd2a3bd530...454f73b5a4

   * supply the token with the argument ``--github-login <TOKEN>`` from the command line,
   * or supply the token from the command line when queried interactively for it


The creation of the sibling can also be confirmed with :command:`datalad siblings`:

.. code-block:: bash

   $ datalad siblings
   .: here(+) [git]
   .: public-s3(+) [git]
   .: github(-) [https://github.com/jsheunis/sample-neuro-data.git (git)]

The next step is to actually push the file content to where it needs to be in order
to allow others to access the data. We do this with :command:`datalad push --to github`.
The ``--to github`` specifies which sibling to push the dataset to, but because of the
publication dependency DataLad will push the annexed contents to the special remote first.

.. code-block:: bash

   $ datalad push --to github
   copy(ok): dataset_description.json (file) [to public-s3...]
   copy(ok): participants.tsv (file) [to public-s3...]
   copy(ok): sub-01/anat/sub-01_T1w.nii.gz (file) [to public-s3...]
   copy(ok): sub-01/func/sub-01_task-rest_run-1_bold.nii.gz (file) [to public-s3...]
   copy(ok): sub-01/func/sub-01_task-rest_run-2_bold.nii.gz (file) [to public-s3...]
   copy(ok): task-rest_bold.json (file) [to public-s3...]
   publish(ok): . (dataset) [refs/heads/main->github:refs/heads/main [new branch]]
   publish(ok): . (dataset) [refs/heads/git-annex->github:refs/heads/git-annex [new branch]]

You can now view the annexed file content (with MD5 hashes as filenames) in the
`S3 bucket <https://console.aws.amazon.com/s3/>`_:

.. figure:: ../artwork/src/aws_s3_bucket_full.png

   The public S3 bucket with annexed file content pushed

Lastly, the GitHub repository will also show the newly pushed dataset (with
the "files" being symbolic links to the annexed content on the S3 remote):

.. figure:: ../artwork/src/aws_s3_github_repo.png

   The public GitHub repository with the DataLad dataset


Test the setup!
^^^^^^^^^^^^^^^

You have now successfully created a DataLad dataset with an AWS S3 special remote for
annexed file content and with a public GitHub sibling from which the dataset can be accessed.
Users can now :command:`datalad clone` the dataset using the GitHub repository URL:

.. code-block:: bash

   $ cd /tmp
   $ datalad clone https://github.com/<enter-your-your-organization-or-account-name-here>/neuro-data-s3.git
   [INFO   ] Scanning for unlocked files (this may take some time)
   [INFO   ] Remote origin not usable by git-annex; setting annex-ignore
   install(ok): /tmp/neuro-data-s3 (dataset)

   $ cd neuro-data-s3
   $ datalad get . -r
   get(ok): dataset_description.json (file) [from public-s3...]
   get(ok): participants.tsv (file) [from public-s3...]
   get(ok): sub-01/anat/sub-01_T1w.nii.gz (file) [from public-s3...]
   get(ok): sub-01/func/sub-01_task-rest_run-1_bold.nii.gz (file) [from public-s3...]
   get(ok): sub-01/func/sub-01_task-rest_run-2_bold.nii.gz (file) [from public-s3...]
   get(ok): task-rest_bold.json (file) [from public-s3...]
   action summary:
   get (ok: 6)

The results of running the code above show that DataLad could :command:`install` the dataset correctly
and :command:`get` all annexed file content successfully from the ``public-s3`` sibling.

Congrats!


.. [#f5] Instead of using GitHub's WebUI you could also obtain a token using the command line GitHub interface (https://github.com/sociomantic-tsunami/git-hub) by running ``git hub setup`` (if no 2FA is used).
   If you decide to use the command line interface, here is help on how to use it:
   Clone the `GitHub repository <https://github.com/sociomantic-tsunami/git-hub>`_ to your local computer.
   Decide whether you want to build a Debian package to install, or install the single-file Python script distributed in the repository.
   Make sure that all `requirements <https://github.com/sociomantic-tsunami/git-hub#dependencies>`_ for your preferred version are installed , and run either ``make deb`` followed by ``sudo dpkg -i deb/git-hub*all.deb``, or ``make install``.

.. [#f7] To re-read about Git's configurations and the ``git config`` command, please take a look at the section :ref:`config`.
