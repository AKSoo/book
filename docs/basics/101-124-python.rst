.. _python:

DataLad's Python API
--------------------


"Whatever you can do with DataLad from the command line, you can also do with
DataLads Python API", begins the lecturer.
"In addition to the command line interface you are already very familiar with,
DataLad's functionality can also be used within interactive Python sessions
or Python scripts.
This feature can help to automate dataset operations, provides an alternative
to the command line, and it is immensely useful when creating reproducible
data analyses."

This lecture will give you an overview on DataLad's Python API and explore
how to make use of it in an analysis project. Together with the previous
section on the YODA principles, this section will be the basis for a data
analysis midterm project.

All of DataLad's user-oriented commands are exposed via ``datalad.api``.
Thus, any command can be imported as a stand-alone command like this::

   >>> from datalad.api import <COMMAND>

The `developer documentation <http://docs.datalad.org/en/latest/modref.html>`_
of DataLad lists an overview of all commands, but naming is congruent to the
command line interface. The only functionality that is not available at the
command line is ``datalad.api.Dataset``, DataLads core data type
representation in Python. Just like any other command, it can be imported
like this::

   >>> from datalad.api import Dataset


A ``Dataset`` is a class that represents a DataLad dataset. In addition to the
stand-alone commands, all of DataLad's functionality is available via methods
of this class as well. Thus, these are two equally valid ways to create a new
dataset with DataLad in Python::

   >>> from datalad.api import create, Dataset
   # create as a stand-alone command
   >>> create(path='scratch/test')
   [INFO   ] Creating a new annex repo at /home/me/scratch/test
   Out[3]: <Dataset path=/home/me/scratch/test>

   # create as a dataset method
   >>> ds = Dataset(path='scratch/test')
   >>> ds.create()
   [INFO   ] Creating a new annex repo at /home/me/scratch/test
   Out[3]: <Dataset path=/home/me/scratch/test>

As shown above, the only required parameter for a Dataset is the ``path`` to
its location. This location may or may not exist yet.


.. todo::

   make these python code snippets executable?

Use cases for DataLad's Python API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
"Why should one use the Python API? Can't we do everything necessary via the
command line already? Does Python add anything to this?" asks somebody.

It is completely up to on you and dependent on your preferred workflow
whether you decide to use the command line or the Python API of DataLad for
the majority of tasks. Both are valid ways to accomplish the same results.
One typical application though is the use of :command:`datalad get` in Python
scripts to ensure data retrieval. While the :command:`datalad run` command
can take care of this as well with correctly specified ``--input`` arguments,
taking care of file retrieval in scripts is a fail-safe methods when sharing
datasets with users that may not use DataLad (and thus not the
:command:`datalad rerun` command). Likewise, using :command:`datalad install`
within scripts to install subdatasets that after an initial installation of
the superdataset are potentially only registered to the superdataset ensures
subdataset availability. The usecase :ref:`usecase_reproducible_paper`
showcases such a situation.

A reproducible data analysis project with DataLad
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to combine the previous section on YODA principles and DataLad's
Python API, DataLad-101's midterm project is a data analysis project.

.. todo::

   Think of a suitable analysis

For this, you start by creating an analysis dataset. Let's do it as a subdataset
of ``DataLad-101``. For this, specify the ``--dataset`` option within
:command:`datalad create`:

.. runrecord:: _examples/DL-101-124-105
   :language: console
   :workdir: dl-101/DataLad-101

   $ datalad create --dataset . midterm_project

.. index:: ! datalad command; datalad subdatasets

The :command:`datalad subdatasets` can report on which subdatasets exist for
``DataLad-101``:

.. runrecord:: _examples/DL-101-124-106
   :language: console
   :workdir: dl-101/DataLad-101

   $ datalad subdatasets

Not only the longnow dataset, but also the newly created ``midterm_project``
subdataset are displayed.
This is the current directory structure of ``DataLad-101``:

.. runrecord:: _examples/DL-101-124-107
   :language: console
   :workdir: dl-101/DataLad-101

   $ tree -d
