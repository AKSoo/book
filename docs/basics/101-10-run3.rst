Content-protection, powered by Git-annex [1]
--------------------------------------------

**Oh crap!** A "permission denied" error? Confused about what we might have
done wrong, we raise our hand to ask the instructor for help.
Knowlingly, she smiles, and tells you about how DataLad protects content given
to it:

"Content in your DataLad dataset is protected by :term:`Git-annex` from
accidental changes" our instructor begins.

"Wait!" we interrupt. "First of, that wasn't accidental. And second, I was told this
course does not have ``Git-annex-101`` as a prerequisite?"

"Yes, hear me out" she says. "I promise you two different solutions at
the end of this explanation, and the concept behind this is quite relevant".

DataLad usually gives content to :term:`Git-annex` to store and track.
Git-annex, let's just say, takes this task *really* seriously. One of it's
features that you have just experienced is that it *locks* content [#f1]_.

If files are *locked down*, their content can't be modified. In principle,
thats not a bad thing: It could be the presidents nuclear launch code in that file,
and you don't *accidentally* want to change that.
Therefore, a file needs to be consciously *unlocked* to apply modifications.

There is a DataLad command that takes care of unlocking file content: ``datalad unlock``.
Let us check out what it does:

.. todo::

   demonstrate unlock as in:

    .. code-block:: bash

       .. runrecord:: _examples/DL-101-10-1
          :language: console
          :workdir: dl-101/DataLad-101

          $ datalad unlock <path/to/file.jpg>

Well, ``unlock(ok)`` does not sound too bad for a start. As always, we
feel the urge to run a ``datalad status`` on this:


.. todo::

   demonstrate unlock as in:

    .. code-block:: bash

       .. runrecord:: _examples/DL-101-10-2
          :language: console
          :workdir: dl-101/DataLad-101

          $ datalad status

"Ah, don't mind that for now", our intructor says, and with a wink she
continous: "We'll talk about symlinks and object trees a while later".
We're not really sure whether that's a good thing, but we have a task to focus
on. As before, we try to execute the ``datalad run`` command.

.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-3
         :language: console
         :workdir: dl-101/DataLad-101

         $ datalad run --input "recordings/longnow/podcast_icon_seminars_02017_300x300.jpg" "convert -resize 450x450 recordings/longnow/podcast_icon_seminars_02017_300x300.jpg recordings/cropped_logo.jpg


Hey, no permission denied error! And does the picture look better to you?

You note that the instructor still stands right next to you. "Sooo...
now what do I do to *lock* the file again?" you ask.

"Oh, you already did. Or rather: ``datalad save`` did it for you."

"Wait, I did not do a ``datalad save``." you say.

"Well, a ``datalad save`` is the end of every ``datalad run``. So in a way, you did."

"So", you wonder aloud, "Whenever I want to modify I need to
``datalad unlock`` it, do the modifications, and then ``datalad save`` it?"

"Well, this is certainly one way of doing it, and a completely valid workflow
if you would do that outside of a ``datalad run`` command.
But within ``datalad run`` there is actually a much easier way of doing this.
Let's use the ``--output`` argument."

``datalad run`` retrieves everything that is specified as ``--input`` prior to
command execution, and it *unlocks* everything specified as ``--output`` prior to
command execution. Therefore, whatever the output of a ``datalad run`` command is
should be specified as an argument to the ``-o``/``--output`` option.

In order to execute the command again, lets change the dimensions to be resized again:

.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-4
         :language: console
         :workdir: dl-101/DataLad-101

         $ datalad run --input "recordings/longnow/podcast_icon_seminars_02017_300x300.jpg"
         --output "recordings/file.jpg"
         "convert -resize 400x400 recordings/longnow/podcast_icon_seminars_02017_300x300.jpg recordings/cropped_logo.jpg

This time, DataLad informs about the both ``datalad get`` and the ``datalad unlock`` operations
it performs, and ``datalad run`` executes the command successfully.

As with ``--input``, it is good practice to specify the ``--output`` of a command as well.
It makes it possible to rerun the command without permission denied errors, and thus makes
your life and the life of everyone who obtains a copy of your dataset easier.
Note now also how many individual commands a ``datalad run`` saves us:
``datalad get``, ``datalad unlock``, ``datalad save``!

With this last code snippet, you have experienced a full ``datalad run`` command: commit message,
input and output definitions (the order in which you give those two options is irrelevant),
and command to be executed. Whenever a command takes input or produces output you should specify
this with the appropriate option.

Make a note of this behavior in your ``notes.txt`` file.


.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-5
         :language: console
         :workdir: dl-101/DataLad-101

         $ cat << EOT >> notes.txt
         You should specify and files that a command takes as input with an -i/--input flag. These
         files will be retrieved prior to the command execution. Any content that is modified or
         produced by the command should be specified with an -o/--output flag. Upon a run or rerun
         of the command, the contents of these files will get unlocked so that they can be modified.
         EOT

Just now you remembered that you need to do the ``datalad run`` command yet again - we wanted to have
the image in 450x450 px size. "Now this definitely will be the last time I'm running this", you think.


.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-6
         :language: console
         :workdir: dl-101/DataLad-101

         $ datalad run --input "recordings/longnow/podcast_icon_seminars_02017_300x300.jpg"
         --output "recordings/file.jpg"
         "convert -resize 450x450 recordings/longnow/podcast_icon_seminars_02017_300x300.jpg recordings/cropped_logo.jpg

Oh for f**** sake... run is "impossible"? Weird. Reading on, DataLad informs that a "clean dataset" is required.
Run a ``datalad save`` to see what is meant by this:


.. todo::

   demonstrate unlock as in:

    .. code-block:: bash

       .. runrecord:: _examples/DL-101-10-7
          :language: console
          :workdir: dl-101/DataLad-101

          $ datalad status

Ah right. We forgot to save the notes we added. There are two ways to get around this error message:
One is to save the modifications, and run the command in a clean dataset status.

This would look like this:
Save the changes,


.. todo::

   demonstrate unlock as in:

    .. code-block:: bash

       .. runrecord:: _examples/DL-101-10-8
          :language: console
          :workdir: dl-101/DataLad-101

          $ datalad save -m "add additional notes on run options" notes.txt

and then try again:

.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-9
         :language: console
         :workdir: dl-101/DataLad-101

         $ datalad run --input "recordings/longnow/podcast_icon_seminars_02017_300x300.jpg"
         --output "recordings/file.jpg"
         "convert -resize 450x450 recordings/longnow/podcast_icon_seminars_02017_300x300.jpg recordings/cropped_logo.jpg

A different option is to add the ``--explicit`` flag to ``datalad run``:

.. todo::

   do a runrecord of

   .. code-block:: bash

      .. runrecord:: _examples/DL-101-10-10
         :language: console
         :workdir: dl-101/DataLad-101

         $ datalad run --input "recordings/longnow/podcast_icon_seminars_02017_300x300.jpg"
         --output "recordings/file.jpg"
         --explicit
         "convert -resize 450x450 recordings/longnow/podcast_icon_seminars_02017_300x300.jpg recordings/cropped_logo.jpg

With this flag, DataLad considers the specification of inputs and outputs to be "explicit".
It doesn't warn if the repository is dirty (as before), and only saves modifications to the
listed outputs. This obviously has advantages and disadvantages, and you have to decide for
yourself whether you want to make sure to have a clean ``datalad status`` and record every
impact of a command on a dataset, or whether you want to record only what you specified in
``--output``.

If you used the ``--explicit`` flag, make sure to save your modifications to the notes now!

.. todo::

   - add something on .gitignore -- else untracked content needs to be tracked for datalad run
     without --explicit.

   - add section on why locking did not happen with text files

   - we need to address symlinks, objecttrees, etc.

   - TODO: escape special characters

   evtl relevant:
   reveal.js pr√§sentation einbauen
   mit pandoc oder rst2pdf notes.txt umbauen


.. rubric:: Footnotes

.. [#f1] In the future, when DataLad datasets are Git-annex v7 repositories by default,
         this behaviour will not be the default anymore. This handbook will
         be adjusted to this change at that point.